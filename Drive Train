package frc.robot;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.TimedRobot;
//import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;

/**import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.VictorSPX;*/
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

/**
 * The VM is configured to automatically run this class, and to call the functions corresponding to
 * each mode, as described in the TimedRobot documentation. If you change the name of this class or
 * the package after creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {

  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */

   //Right Motors
   private final WPI_VictorSPX rightMotor1 = new WPI_VictorSPX(1);
   private final WPI_VictorSPX rightMotor2 = new WPI_VictorSPX(3);

   //Left Motors
   private final WPI_VictorSPX leftMotor1 = new WPI_VictorSPX(2);
   private final WPI_VictorSPX leftMotor2 = new WPI_VictorSPX(4);

   //Arm Motors
   private final WPI_VictorSPX armextensionMotor = new WPI_VictorSPX(5);
   private final WPI_VictorSPX armliftMotor = new WPI_VictorSPX(6);

   //Speed Controller Groups
   private final MotorControllerGroup rightMotorControllerGroup = new MotorControllerGroup(rightMotor1, rightMotor2);
   private final MotorControllerGroup leftMotorControllerGroup = new MotorControllerGroup(leftMotor1, leftMotor2);

   //Drive Train

   private final DifferentialDrive drivetrain = new DifferentialDrive(rightMotorControllerGroup, leftMotorControllerGroup);

   //Joystick
   private final Joystick stick = new Joystick(0);

   //XboxController
   private final XboxController xbox = new XboxController(1);

   //Pneumatics
   private final Compressor comp = new Compressor(PneumaticsModuleType.CTREPCM);
   private final DoubleSolenoid solenoid = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, 0, 1);

   @Override
  public void robotInit() {
  }

  /**
   * This function is called every robot packet, no matter the mode. Use this for items like
   * diagnostics that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {}

  /**
   * This autonomous (along with the chooser code above) shows how to select between different
   * autonomous modes using the dashboard. The sendable chooser code works with the Java
   * SmartDashboard. If you prefer the LabVIEW Dashboard, remove all of the chooser code and
   * uncomment the getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to the switch structure
   * below with additional strings. If using the SendableChooser make sure to add them to the
   * chooser code above as well.
   */
  @Override
  public void autonomousInit() {

    comp.disable();

  }

  /** This function is called periodically during autonomous. */
/**  @Override
  public void autonomousPeriodic() {

    if (Timer.getMatchTime() < 2.5) {
      drivetrain.arcadeDrive(0, -1);
    } else {
      drivetrain.stopMotor();
    }
  if (Timer.getMatchTime() < 2){
    shooterMotorControllerGroup.set(1);
  }else{
      shooterMotorControllerGroup.set(0);
    }
  }
*/
  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {

    comp.enableDigital();

  }

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {

        drivetrain.arcadeDrive(stick.getZ() * 0.8, -stick.getY(), true);


    if (xbox.getLeftBumperPressed()){
      solenoid.set(DoubleSolenoid.Value.kForward);
    } else if (xbox.getRightBumper()){
      solenoid.set(DoubleSolenoid.Value.kReverse);
    }
  
    if (xbox.getStartButton()){
      comp.enableDigital();
    } else if (xbox.getStartButton()){
      comp.disable();
    }
  }
{
    
//Arm Outward

    if (xbox.getYButtonPressed()){
      armextensionMotor.set(.5);
    } else if (xbox.getYButtonReleased()){
      armextensionMotor.set(0);
    }

//Arm Inward
    if (xbox.getXButtonPressed()){
      armextensionMotor.set(-.5);
    } else if (xbox.getXButtonReleased()){
      armextensionMotor.set(0);
    }

//Arm Up

    if (xbox.getAButtonPressed()){
      armliftMotor.set(.3);
    } else if (xbox.getAButtonReleased()){
      armliftMotor.set(0);
    }

//Arm Down
    if (xbox.getBButtonPressed()){
      armliftMotor.set(-.3);
    } else if (xbox.getBButtonReleased()){
      armliftMotor.set(0);
    }
}


  /** This function is called once when the robot is disabled. */
  @Override
  public void disabledInit() {}

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {}

  /** This function is called once when test mode is enabled. */
  @Override
  public void testInit() {}

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {}

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {}

  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {}
}
